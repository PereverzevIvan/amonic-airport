// Package api Code generated by swaggo/swag. DO NOT EDIT
package api

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/airports": {
            "get": {
                "description": "Получение cписка самолётов",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Airports"
                ],
                "summary": "Get All Airports",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Airport"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/amenities": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Amenity"
                ],
                "summary": "Получить все услуги",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Amenity"
                            }
                        }
                    }
                }
            }
        },
        "/cabin-type-default-amenities": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Amenity"
                ],
                "summary": "Получить включенные услуги для типа кабины",
                "parameters": [
                    {
                        "type": "integer",
                        "name": "cabinTypeID",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                }
            }
        },
        "/countries": {
            "get": {
                "description": "Получение стран",
                "tags": [
                    "Country"
                ],
                "summary": "Get All Countries",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Country"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/country/{id}": {
            "get": {
                "description": "Получение информации о стране по ее числовому ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Country"
                ],
                "summary": "Get Country by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Country ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Country"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Вход пользователя по адресу электронной почты и паролю.\nВозвращает два токена для авторизации в куках.\nНазвание кук: \"access-token\" и \"refresh-token\"",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "login success"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/logout": {
            "get": {
                "description": "Выход пользователя из системы",
                "tags": [
                    "Auth"
                ],
                "summary": "User Logout",
                "responses": {
                    "200": {
                        "description": "logout success"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/office/{id}": {
            "get": {
                "description": "Получение информации об офисе по его идентификатору",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Office"
                ],
                "summary": "Get Office by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Office ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Office"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/offices": {
            "get": {
                "description": "Получение информации о всех офисах",
                "tags": [
                    "Office"
                ],
                "summary": "Get all offices",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Office"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/refresh": {
            "get": {
                "description": "Получить новую пару",
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh token",
                "responses": {
                    "200": {
                        "description": "refresh success"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/schedule/{id}": {
            "get": {
                "description": "Получение cписка полетов",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedules"
                ],
                "summary": "Get Schedules by id",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Schedule"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "put": {
                "description": "Обновление статуса confirmed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedules"
                ],
                "summary": "Update Schedule confirmed  by id",
                "parameters": [
                    {
                        "description": "example",
                        "name": "SchedulesParams",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ScheduleUpdateConfirmedParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "patch": {
                "description": "Обновление",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedules"
                ],
                "summary": "Update Schedule  by id",
                "parameters": [
                    {
                        "description": "example",
                        "name": "SchedulesParams",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ScheduleUpdateParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/schedules": {
            "get": {
                "description": "Получение cписка полетов",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedules"
                ],
                "summary": "Get All Schedules",
                "parameters": [
                    {
                        "type": "string",
                        "name": "flight_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "outbound",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Schedule"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/schedules/upload": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedules"
                ],
                "summary": "Загрузить файл CSV для обновления или добавления / обновления списка полетов",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SchedulesUploadResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/search-flights": {
            "post": {
                "description": "Загрузить CSV файл по ключу \"file\" (name=\"file\")",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedules"
                ],
                "summary": "Поиск полётов между двумя аэропортами с пересадками",
                "parameters": [
                    {
                        "description": "example",
                        "name": "SearchOutboundAndInboundFlightsParams",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SearchOutboundAndInboundFlightsParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SearchOutboundAndInboundFlightResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/ticket-amenities": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Amenity"
                ],
                "summary": "Получить купленные услуги для билета",
                "parameters": [
                    {
                        "type": "integer",
                        "name": "ticketID",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AmenityTicket"
                            }
                        }
                    }
                }
            }
        },
        "/tickets": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tickets"
                ],
                "summary": "Get all tickets",
                "parameters": [
                    {
                        "type": "string",
                        "name": "booking_reference",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/tickets/booking": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tickets"
                ],
                "summary": "Book tickets",
                "parameters": [
                    {
                        "description": "example",
                        "name": "TicketsBookingParams",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TicketsBookingParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.TicketsBookResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/tickets/confirm": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tickets"
                ],
                "summary": "Confirm tickets",
                "parameters": [
                    {
                        "description": "example",
                        "name": "TicketIDsParams",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TicketIDsParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/tickets/remaining-seats-count": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tickets"
                ],
                "summary": "Check enough tickets",
                "parameters": [
                    {
                        "description": "example",
                        "name": "TicketsCountRemainingSeatsParams",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TicketsCountRemainingSeatsParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.TicketsRemainingSeatsCount"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/user-sessions/": {
            "get": {
                "description": "Получить список сессий пользователя по его ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User sessions"
                ],
                "summary": "Get user sessions",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Get only invalid sessions of user",
                        "name": "only_invalid_sessions",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit of records in page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.UserSession"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "patch": {
                "description": "Установка причины неудачного выхода из системы",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User sessions"
                ],
                "summary": "Set Unsuccessfull Logout Reason",
                "parameters": [
                    {
                        "description": "Информация о сессии",
                        "name": "session_data",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/models.UserSession"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/user/{id}": {
            "get": {
                "description": "Получение информации о пользователе по его идентификатору",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Фильтр по id офиса",
                        "name": "office_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Получение информации о всех пользователях",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get all users",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Фильтр по id офиса",
                        "name": "office_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "j.doe@amonic.com"
                },
                "password": {
                    "type": "string",
                    "example": "123"
                }
            }
        },
        "models.Aircraft": {
            "type": "object",
            "properties": {
                "business_seats": {
                    "type": "integer"
                },
                "economy_seats": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "make_model": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "total_seats": {
                    "type": "integer"
                }
            }
        },
        "models.Airport": {
            "type": "object",
            "properties": {
                "country_id": {
                    "type": "integer"
                },
                "iata_code": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.Amenity": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "price": {
                    "type": "number"
                },
                "service": {
                    "type": "string"
                }
            }
        },
        "models.AmenityTicket": {
            "type": "object",
            "properties": {
                "amenity": {
                    "$ref": "#/definitions/models.Amenity"
                },
                "amenity_id": {
                    "type": "integer"
                },
                "price": {
                    "type": "number"
                },
                "ticket_id": {
                    "type": "integer"
                }
            }
        },
        "models.CabinType": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.Country": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.Office": {
            "type": "object",
            "properties": {
                "contact": {
                    "type": "string"
                },
                "country_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "phone": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "models.Route": {
            "type": "object",
            "properties": {
                "arrival_airport": {
                    "$ref": "#/definitions/models.Airport"
                },
                "arrival_airport_id": {
                    "type": "integer"
                },
                "departure_airport": {
                    "$ref": "#/definitions/models.Airport"
                },
                "departure_airport_id": {
                    "type": "integer"
                },
                "distance": {
                    "type": "integer"
                },
                "flight_time": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "models.Schedule": {
            "type": "object",
            "properties": {
                "aircraft": {
                    "$ref": "#/definitions/models.Aircraft"
                },
                "aircraft_id": {
                    "type": "integer"
                },
                "confirmed": {
                    "type": "boolean"
                },
                "date": {
                    "type": "string"
                },
                "economy_price": {
                    "type": "number"
                },
                "flight_number": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "outbound": {
                    "type": "string"
                },
                "route": {
                    "$ref": "#/definitions/models.Route"
                },
                "route_id": {
                    "type": "integer"
                },
                "time": {
                    "type": "string"
                }
            }
        },
        "models.ScheduleUpdateConfirmedParams": {
            "type": "object",
            "properties": {
                "confirmed": {
                    "type": "boolean"
                }
            }
        },
        "models.ScheduleUpdateParams": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "economy_price": {
                    "type": "number"
                },
                "time": {
                    "type": "string"
                }
            }
        },
        "models.SchedulesUploadResult": {
            "type": "object",
            "properties": {
                "duplicated_rows_cnt": {
                    "type": "integer"
                },
                "failed_rows_cnt": {
                    "type": "integer"
                },
                "missing_fields_rows_cnt": {
                    "type": "integer"
                },
                "successful_rows_cnt": {
                    "type": "integer"
                },
                "total_rows_cnt": {
                    "type": "integer"
                }
            }
        },
        "models.SearchFlightsParams": {
            "type": "object",
            "properties": {
                "from": {
                    "type": "integer"
                },
                "increase_search_interval": {
                    "type": "boolean"
                },
                "outbound_date": {
                    "type": "string"
                },
                "to": {
                    "type": "integer"
                }
            }
        },
        "models.SearchOutboundAndInboundFlightResult": {
            "type": "object",
            "properties": {
                "inbound_flights": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/models.Schedule"
                        }
                    }
                },
                "outbound_flights": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/models.Schedule"
                        }
                    }
                }
            }
        },
        "models.SearchOutboundAndInboundFlightsParams": {
            "type": "object",
            "properties": {
                "inbound": {
                    "$ref": "#/definitions/models.SearchFlightsParams"
                },
                "outbound": {
                    "$ref": "#/definitions/models.SearchFlightsParams"
                }
            }
        },
        "models.Summary": {
            "type": "object",
            "properties": {
                "average_daily_flight_time_minutes": {
                    "type": "integer"
                },
                "busiest_day": {
                    "type": "string"
                },
                "busiest_day_number_of_passengers": {
                    "type": "integer"
                },
                "most_quiet_day": {
                    "type": "string"
                },
                "most_quiet_day_number_of_passengers": {
                    "type": "integer"
                },
                "number_cancelled_flights": {
                    "type": "integer"
                },
                "number_confirmed_flights": {
                    "type": "integer"
                },
                "revenue_from_ticket_sales": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "time_taken_to_generate_report": {
                    "type": "integer"
                },
                "top_customer_by_purchased_tickets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "top_offices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "weekly_report_of_percentage_of_empty_seats": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                }
            }
        },
        "models.Ticket": {
            "type": "object",
            "properties": {
                "booking_reference": {
                    "type": "string"
                },
                "cabinType": {
                    "$ref": "#/definitions/models.CabinType"
                },
                "cabin_type_id": {
                    "type": "integer"
                },
                "confirmed": {
                    "type": "boolean"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                },
                "passport_country_id": {
                    "type": "integer"
                },
                "passport_number": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "schedule": {
                    "$ref": "#/definitions/models.Schedule"
                },
                "schedule_id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "models.TicketIDsParams": {
            "type": "object",
            "properties": {
                "tickets": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "models.TicketPassengerInfo": {
            "type": "object",
            "properties": {
                "birthday": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "passport_country_id": {
                    "type": "integer"
                },
                "passport_number": {
                    "type": "string"
                },
                "phone": {
                    "description": "Email string ` + "`" + `json:\"email\"` + "`" + `",
                    "type": "string"
                }
            }
        },
        "models.TicketsBookResult": {
            "type": "object",
            "properties": {
                "tickets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Ticket"
                    }
                },
                "total_cost": {
                    "type": "number"
                }
            }
        },
        "models.TicketsBookingParams": {
            "type": "object",
            "properties": {
                "cabin_type": {
                    "type": "integer"
                },
                "inbound_schedules": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "outbound_schedules": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "passengers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.TicketPassengerInfo"
                    }
                }
            }
        },
        "models.TicketsCountRemainingSeatsParams": {
            "type": "object",
            "properties": {
                "schedule_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "models.TicketsRemainingSeatsCount": {
            "type": "object",
            "properties": {
                "business_seats": {
                    "type": "integer"
                },
                "economy_seats": {
                    "type": "integer"
                },
                "first_class_seats": {
                    "type": "integer"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "birthday": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                },
                "office_id": {
                    "type": "integer"
                },
                "role_id": {
                    "type": "integer"
                }
            }
        },
        "models.UserSession": {
            "type": "object",
            "properties": {
                "crash_reason_type": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "invalid_logout_reason": {
                    "type": "string"
                },
                "login_at": {
                    "type": "string"
                },
                "logout_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "access-token",
            "in": "cookie"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Разработка бизнес-приложений - лаба 1",
	Description:      "Это API лабораторной работы 1 по дисциплине \"Разработка бизнес-приложений\".\nТема проекта - аэропорт.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
