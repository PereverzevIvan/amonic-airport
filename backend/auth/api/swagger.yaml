components:
  securitySchemes:
    cookieAuth:         # arbitrary name for the security scheme; will be used in the "security" key later
      type: apiKey
      in: cookie
      name: access-token  # cookie name




basePath: /api
definitions:
  controllers.LoginRequest:
    properties:
      email:
        example: j.doe@amonic.com
        type: string
      password:
        example: "123"
        type: string
    type: object
  models.Country:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.Office:
    properties:
      contact:
        type: string
      countryID:
        type: integer
      id:
        type: integer
      phone:
        type: string
      title:
        type: string
    type: object
  models.User:
    properties:
      active:
        type: boolean
      birthday:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      office_id:
        type: integer
      role_id:
        type: integer
    type: object
  models.UserSession:
    properties:
      crash_reason_type:
        type: integer
      id:
        type: integer
      invalid_logout_reason:
        type: string
      login_at:
        type: string
      logout_at:
        type: string
      user_id:
        type: integer
    type: object
host: localhost:3000
info:
  contact:
    email: fiber@swagger.io
    name: API Support
  description: This is a sample swagger for Fiber
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Fiber Example API
  version: "1.0"
paths:
  /country/{id}:
    get:
      consumes:
      - application/json
      description: Получение информации о стране по ее числовому ID
      parameters:
      - description: Country ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Country'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
      summary: Get Country by id
      tags:
      - Country
  /login:
    post:
      security:
        - cookieAuth: []
      consumes:
      - application/json
      description: |-
        Вход пользователя по адресу электронной почты и паролю.
        Возвращает токены для авторизации в куках.
      parameters:
      - description: Login params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: login success
          headers:
            Set-Cookie:
              schema:
                  type: string
                  example: access-token=abcde12345; Path=/; HttpOnly
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: User login
      tags:
      - Auth
  /logout:
    security:
        - cookieAuth: []
    post:
      consumes:
      - application/json
      description: Выход пользователя из системы.
      parameters:
      - description: Login params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginRequest'
      produces:
      - application/json
      responses:
        "201":
          description: login success
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: User Logout
      tags:
      - Auth
  /office/{id}:
    get:
      consumes:
      - application/json
      description: Получение информации об офисе по его идентификатору
      parameters:
      - description: Office ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Office'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
      summary: Get Office by ID
      tags:
      - Office
  /user-sessions/:
    get:
      consumes:
      - application/json
      description: Получить список сессий пользователя по его ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Get only invalid sessions of user
        in: query
        name: only_invalid_sessions
        type: boolean
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Limit of records in page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserSession'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get user sessions
      tags:
      - User sessions
  /user/{id}:
    get:
      consumes:
      - application/json
      description: Получение информации о пользователе по его идентификатору
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
      summary: Get user by ID
      tags:
      - Users
swagger: "2.0"
