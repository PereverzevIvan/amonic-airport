basePath: /api
definitions:
  controllers.LoginRequest:
    properties:
      email:
        example: j.doe@amonic.com
        type: string
      password:
        example: "123"
        type: string
    type: object
  models.Aircraft:
    properties:
      business_seats:
        type: integer
      economy_seats:
        type: integer
      id:
        type: integer
      make_model:
        type: string
      name:
        type: string
      total_seats:
        type: integer
    type: object
  models.Airport:
    properties:
      country_id:
        type: integer
      iata_code:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  models.Amenity:
    properties:
      id:
        type: integer
      price:
        type: number
      service:
        type: string
    type: object
  models.AmenityTicket:
    properties:
      amenity:
        $ref: '#/definitions/models.Amenity'
      amenity_id:
        type: integer
      price:
        type: number
      ticket_id:
        type: integer
    type: object
  models.CabinType:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.Country:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.Office:
    properties:
      contact:
        type: string
      country_id:
        type: integer
      id:
        type: integer
      phone:
        type: string
      title:
        type: string
    type: object
  models.Route:
    properties:
      arrival_airport:
        $ref: '#/definitions/models.Airport'
      arrival_airport_id:
        type: integer
      departure_airport:
        $ref: '#/definitions/models.Airport'
      departure_airport_id:
        type: integer
      distance:
        type: integer
      flight_time:
        type: integer
      id:
        type: integer
    type: object
  models.Schedule:
    properties:
      aircraft:
        $ref: '#/definitions/models.Aircraft'
      aircraft_id:
        type: integer
      confirmed:
        type: boolean
      date:
        type: string
      economy_price:
        type: number
      flight_number:
        type: string
      id:
        type: integer
      outbound:
        type: string
      route:
        $ref: '#/definitions/models.Route'
      route_id:
        type: integer
      time:
        type: string
    type: object
  models.ScheduleUpdateConfirmedParams:
    properties:
      confirmed:
        type: boolean
    type: object
  models.ScheduleUpdateParams:
    properties:
      date:
        type: string
      economy_price:
        type: number
      time:
        type: string
    type: object
  models.SchedulesUploadResult:
    properties:
      duplicated_rows_cnt:
        type: integer
      failed_rows_cnt:
        type: integer
      missing_fields_rows_cnt:
        type: integer
      successful_rows_cnt:
        type: integer
      total_rows_cnt:
        type: integer
    type: object
  models.SearchFlightsParams:
    properties:
      from:
        type: integer
      increase_search_interval:
        type: boolean
      outbound_date:
        type: string
      to:
        type: integer
    type: object
  models.SearchOutboundAndInboundFlightResult:
    properties:
      inbound_flights:
        items:
          items:
            $ref: '#/definitions/models.Schedule'
          type: array
        type: array
      outbound_flights:
        items:
          items:
            $ref: '#/definitions/models.Schedule'
          type: array
        type: array
    type: object
  models.SearchOutboundAndInboundFlightsParams:
    properties:
      inbound:
        $ref: '#/definitions/models.SearchFlightsParams'
      outbound:
        $ref: '#/definitions/models.SearchFlightsParams'
    type: object
  models.Summary:
    properties:
      average_daily_flight_time_minutes:
        type: integer
      busiest_day:
        type: string
      busiest_day_number_of_passengers:
        type: integer
      most_quiet_day:
        type: string
      most_quiet_day_number_of_passengers:
        type: integer
      number_cancelled_flights:
        type: integer
      number_confirmed_flights:
        type: integer
      revenue_from_ticket_sales:
        items:
          type: number
        type: array
      time_taken_to_generate_report:
        type: integer
      top_customer_by_purchased_tickets:
        items:
          type: string
        type: array
      top_offices:
        items:
          type: string
        type: array
      weekly_report_of_percentage_of_empty_seats:
        items:
          type: number
        type: array
    type: object
  models.Ticket:
    properties:
      booking_reference:
        type: string
      cabin_type_id:
        type: integer
      cabinType:
        $ref: '#/definitions/models.CabinType'
      confirmed:
        type: boolean
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      passport_country_id:
        type: integer
      passport_number:
        type: string
      phone:
        type: string
      schedule:
        $ref: '#/definitions/models.Schedule'
      schedule_id:
        type: integer
      user_id:
        type: integer
    type: object
  models.TicketIDsParams:
    properties:
      tickets:
        items:
          type: integer
        type: array
    type: object
  models.TicketPassengerInfo:
    properties:
      birthday:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      passport_country_id:
        type: integer
      passport_number:
        type: string
      phone:
        description: Email string `json:"email"`
        type: string
    type: object
  models.TicketsBookResult:
    properties:
      tickets:
        items:
          $ref: '#/definitions/models.Ticket'
        type: array
      total_cost:
        type: number
    type: object
  models.TicketsBookingParams:
    properties:
      cabin_type:
        type: integer
      inbound_schedules:
        items:
          type: integer
        type: array
      outbound_schedules:
        items:
          type: integer
        type: array
      passengers:
        items:
          $ref: '#/definitions/models.TicketPassengerInfo'
        type: array
    type: object
  models.TicketsCountRemainingSeatsParams:
    properties:
      schedule_ids:
        items:
          type: integer
        type: array
    type: object
  models.TicketsRemainingSeatsCount:
    properties:
      business_seats:
        type: integer
      economy_seats:
        type: integer
      first_class_seats:
        type: integer
    type: object
  models.User:
    properties:
      active:
        type: boolean
      birthday:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      office_id:
        type: integer
      role_id:
        type: integer
    type: object
  models.UserSession:
    properties:
      crash_reason_type:
        type: integer
      id:
        type: integer
      invalid_logout_reason:
        type: string
      login_at:
        type: string
      logout_at:
        type: string
      user_id:
        type: integer
    type: object
host: localhost:3000
info:
  contact: {}
  description: |-
    Это API лабораторной работы 1 по дисциплине "Разработка бизнес-приложений".
    Тема проекта - аэропорт.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Разработка бизнес-приложений - лаба 1
  version: "1.0"
paths:
  /airports:
    get:
      consumes:
      - application/json
      description: Получение cписка самолётов
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Airport'
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Get All Airports
      tags:
      - Airports
  /amenities:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Amenity'
            type: array
      summary: Получить все услуги
      tags:
      - Amenity
  /cabin-type-default-amenities:
    get:
      consumes:
      - application/json
      parameters:
      - in: query
        name: cabinTypeID
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
      summary: Получить включенные услуги для типа кабины
      tags:
      - Amenity
  /countries:
    get:
      description: Получение стран
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Country'
            type: array
        "500":
          description: Internal Server Error
      summary: Get All Countries
      tags:
      - Country
  /country/{id}:
    get:
      consumes:
      - application/json
      description: Получение информации о стране по ее числовому ID
      parameters:
      - description: Country ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Country'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
      summary: Get Country by id
      tags:
      - Country
  /login:
    post:
      consumes:
      - application/json
      description: |-
        Вход пользователя по адресу электронной почты и паролю.
        Возвращает два токена для авторизации в куках.
        Название кук: "access-token" и "refresh-token"
      parameters:
      - description: Login params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: login success
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: User login
      tags:
      - Auth
  /logout:
    get:
      description: Выход пользователя из системы
      responses:
        "200":
          description: logout success
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: User Logout
      tags:
      - Auth
  /office/{id}:
    get:
      consumes:
      - application/json
      description: Получение информации об офисе по его идентификатору
      parameters:
      - description: Office ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Office'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get Office by ID
      tags:
      - Office
  /offices:
    get:
      description: Получение информации о всех офисах
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Office'
            type: array
        "500":
          description: Internal Server Error
      summary: Get all offices
      tags:
      - Office
  /refresh:
    get:
      description: Получить новую пару
      responses:
        "200":
          description: refresh success
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Refresh token
      tags:
      - Auth
  /schedule/{id}:
    get:
      consumes:
      - application/json
      description: Получение cписка полетов
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Schedule'
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Get Schedules by id
      tags:
      - Schedules
    patch:
      consumes:
      - application/json
      description: Обновление
      parameters:
      - description: example
        in: body
        name: SchedulesParams
        required: true
        schema:
          $ref: '#/definitions/models.ScheduleUpdateParams'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Update Schedule  by id
      tags:
      - Schedules
    put:
      consumes:
      - application/json
      description: Обновление статуса confirmed
      parameters:
      - description: example
        in: body
        name: SchedulesParams
        required: true
        schema:
          $ref: '#/definitions/models.ScheduleUpdateConfirmedParams'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Update Schedule confirmed  by id
      tags:
      - Schedules
  /schedules:
    get:
      consumes:
      - application/json
      description: Получение cписка полетов
      parameters:
      - in: query
        name: flight_number
        type: string
      - in: query
        name: from
        type: integer
      - in: query
        name: outbound
        type: string
      - in: query
        name: sort_by
        type: string
      - in: query
        name: to
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Schedule'
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Get All Schedules
      tags:
      - Schedules
  /schedules/upload:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SchedulesUploadResult'
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Загрузить файл CSV для обновления или добавления / обновления списка
        полетов
      tags:
      - Schedules
  /search-flights:
    post:
      consumes:
      - application/json
      description: Загрузить CSV файл по ключу "file" (name="file")
      parameters:
      - description: example
        in: body
        name: SearchOutboundAndInboundFlightsParams
        required: true
        schema:
          $ref: '#/definitions/models.SearchOutboundAndInboundFlightsParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SearchOutboundAndInboundFlightResult'
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Поиск полётов между двумя аэропортами с пересадками
      tags:
      - Schedules
  /ticket-amenities:
    get:
      consumes:
      - application/json
      parameters:
      - in: query
        name: ticketID
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AmenityTicket'
            type: array
      summary: Получить купленные услуги для билета
      tags:
      - Amenity
  /tickets:
    get:
      consumes:
      - application/json
      parameters:
      - in: query
        name: booking_reference
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Get all tickets
      tags:
      - Tickets
  /tickets/booking:
    post:
      consumes:
      - application/json
      parameters:
      - description: example
        in: body
        name: TicketsBookingParams
        required: true
        schema:
          $ref: '#/definitions/models.TicketsBookingParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TicketsBookResult'
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Book tickets
      tags:
      - Tickets
  /tickets/confirm:
    post:
      consumes:
      - application/json
      parameters:
      - description: example
        in: body
        name: TicketIDsParams
        required: true
        schema:
          $ref: '#/definitions/models.TicketIDsParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Confirm tickets
      tags:
      - Tickets
  /tickets/remaining-seats-count:
    post:
      consumes:
      - application/json
      parameters:
      - description: example
        in: body
        name: TicketsCountRemainingSeatsParams
        required: true
        schema:
          $ref: '#/definitions/models.TicketsCountRemainingSeatsParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TicketsRemainingSeatsCount'
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Check enough tickets
      tags:
      - Tickets
  /user-sessions/:
    get:
      consumes:
      - application/json
      description: Получить список сессий пользователя по его ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Get only invalid sessions of user
        in: query
        name: only_invalid_sessions
        type: boolean
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Limit of records in page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserSession'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get user sessions
      tags:
      - User sessions
    patch:
      consumes:
      - application/json
      description: Установка причины неудачного выхода из системы
      parameters:
      - description: Информация о сессии
        in: body
        name: session_data
        schema:
          $ref: '#/definitions/models.UserSession'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Set Unsuccessfull Logout Reason
      tags:
      - User sessions
  /user/{id}:
    get:
      consumes:
      - application/json
      description: Получение информации о пользователе по его идентификатору
      parameters:
      - description: Фильтр по id офиса
        in: query
        name: office_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Get user by ID
      tags:
      - Users
  /users:
    get:
      consumes:
      - application/json
      description: Получение информации о всех пользователях
      parameters:
      - description: Фильтр по id офиса
        in: query
        name: office_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: Internal Server Error
      summary: Get all users
      tags:
      - Users
securityDefinitions:
  ApiKeyAuth:
    in: cookie
    name: access-token
    type: apiKey
swagger: "2.0"
